import feedparser
import asyncio
import time
import os
from datetime import datetime, timedelta, timezone
from pyrogram import Client
from pyrogram.types import Message

# ‚öôÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
SESSION_STRING = os.getenv("SESSION_STRING")
TARGET_CHAT_ID = int(os.getenv("TARGET_CHAT_ID"))
CHANNELS_LIST = os.getenv("CHANNELS_LIST", "")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))
SEARCH_INTERVAL = int(os.getenv("SEARCH_INTERVAL", 3600))  # –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å

# üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
KEYWORDS = {
    "—Ä–æ–∑—ã–≥—Ä—ã—à", "–¥–∞—Ä–∏–º", "–ø—Ä–¥–∞—Ä–∏–º" "giveaway", "–∫–æ–Ω–∫—É—Ä—Å", "–≤—ã–∏–≥—Ä–∞–π", "–ø–æ–¥–∞—Ä–æ–∫",
    "—Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º", "—É—á–∞—Å—Ç–≤—É–π", "—É—á–∞—Å—Ç–≤—É—é", "–ø–æ–¥–∞—Ä–∫–∏"
}

# üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
SEARCH_QUERIES = ["—Ä–æ–∑—ã–≥—Ä—ã—à", "giveaway", "–¥–∞—Ä–∏–º", "–∫–æ–Ω–∫—É—Ä—Å", "–ø–æ–¥–∞—Ä–∫–∏"]

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
app = Client("universal_parser", api_id=API_ID, api_hash=API_HASH, session_string=SESSION_STRING)

# üß† –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
found_channels = set()
if CHANNELS_LIST:
    found_channels.update(ch.strip() for ch in CHANNELS_LIST.split(",") if ch.strip())

processed_links = set()

# üîç –§—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
def contains_keyword(text: str) -> bool:
    if not text:
        return False
    text_lower = text.lower()
    for keyword in KEYWORDS:
        if keyword in text_lower:
            return True
    return False

# üì• –§—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ RSS –∫–∞–Ω–∞–ª–∞
def get_channel_posts(channel_username: str, minutes_ago: int = 15):
    url = f"https://t.me/s/{channel_username}"
    feed = feedparser.parse(url)
    posts = []
    cutoff_time = datetime.now(timezone.utc) - timedelta(minutes=minutes_ago)

    for entry in feed.entries:
        if hasattr(entry, 'published_parsed'):
            pub_date = datetime(*entry.published_parsed[:6], tzinfo=timezone.utc)
        else:
            pub_date = datetime.now(timezone.utc)

        if pub_date > cutoff_time:
            posts.append({
                "title": entry.title if hasattr(entry, 'title') else "",
                "summary": entry.summary if hasattr(entry, 'summary') else "",
                "link": entry.link if hasattr(entry, 'link') else "",
                "published": pub_date,
                "source": f"@{channel_username}"
            })
    return posts

# üì• –§—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
async def get_group_messages(client: Client, chat_id: int, minutes_ago: int = 15):
    messages = []
    cutoff_time = datetime.now(timezone.utc) - timedelta(minutes=minutes_ago)
    async for message in client.get_chat_history(chat_id, limit=20):
        message_utc = message.date.replace(tzinfo=timezone.utc) if message.date.tzinfo is None else message.date
        if message_utc < cutoff_time:
            break
        if message.text:
            messages.append({
                "text": message.text,
                "link": f"tg://openmessage?chat_id={chat_id}&message_id={message.id}",
                "source": message.chat.title or "–ì—Ä—É–ø–ø–∞",
                "date": message.date
            })
    return messages

# üîç –§—É–Ω–∫—Ü–∏—è: –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
async def search_new_channels(client: Client):
    global found_channels
    print(f"\n[üîç] –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...")
    new_channels = set()

    for query in SEARCH_QUERIES:
        print(f"  –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
        try:
            async for chat in client.search_public_chat(query):
                if chat.type == "channel" and chat.username:
                    new_channels.add(chat.username.lower())
                    print(f"    ‚Üí –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: @{chat.username}")
        except Exception as e:
            print(f"    –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ '{query}': {e}")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
    added = new_channels - found_channels
    if added:
        print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(added)} –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {', '.join(added)}")
        found_channels.update(added)
    else:
        print("  ‚ÑπÔ∏è –ù–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞
async def main():
    await app.start()
    print("üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –∞–≤—Ç–æ-–ø–æ–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    print(f"‚è±Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ–≤ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
    print(f"üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ {SEARCH_INTERVAL} —Å–µ–∫—É–Ω–¥")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    print("[+] –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø...")
    groups = []
    async for dialog in app.get_dialogs():
        if dialog.chat.type.value in ["group", "supergroup"]:
            groups.append({
                "id": dialog.chat.id,
                "title": dialog.chat.title,
                "type": dialog.chat.type.value
            })

    # üîç DEBUG: –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
    print(f"\n[DEBUG] –í—Å–µ –¥–∏–∞–ª–æ–≥–∏ (–ø–µ—Ä–≤—ã–µ 20):")
    count = 0
    async for dialog in app.get_dialogs():
        if count >= 20:
            break
        print(f"  - [{dialog.chat.type.value}] {dialog.chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} | ID: {dialog.chat.id}")
        count += 1

    print(f"\n[+] –ù–∞–π–¥–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø")
    print(f"[+] –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º {len(found_channels)} –∫–∞–Ω–∞–ª–æ–≤: {', '.join(found_channels)}")

    last_search_time = 0

    while True:
        try:
            current_time = time.time()

            # üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            if current_time - last_search_time > SEARCH_INTERVAL:
                await search_new_channels(app)
                last_search_time = current_time

            print(f"\n[üïí] {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤...")

            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ RSS
            for channel_username in found_channels:
                try:
                    posts = get_channel_posts(channel_username, minutes_ago=15)
                    for post in posts:
                        link = post["link"]
                        if link in processed_links:
                            continue

                        full_text = f"{post['title']} {post['summary']}"
                        if contains_keyword(full_text):
                            message_text = (
                                f"üéÅ **–ù–∞–π–¥–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à!**\n\n"
                                f"üìå –ò—Å—Ç–æ—á–Ω–∏–∫: {post['source']}\n\n"
                                f"{full_text[:3000]}\n\n"
                                f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({link})"
                            )
                            await app.send_message(TARGET_CHAT_ID, message_text, disable_web_page_preview=False)
                            print(f"[+] ‚úÖ –ö–∞–Ω–∞–ª: {post['source']} | {link}")
                            processed_links.add(link)
                except Exception as e:
                    print(f"[-] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ @{channel_username}: {e}")

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            for group in groups:
                try:
                    messages = await get_group_messages(app, group["id"], minutes_ago=15)
                    for msg in messages:
                        link = msg["link"]
                        if link in processed_links:
                            continue

                        if contains_keyword(msg["text"]):
                            message_text = (
                                f"üéÅ **–ù–∞–π–¥–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à!**\n\n"
                                f"üìå –ò—Å—Ç–æ—á–Ω–∏–∫: {msg['source']}\n\n"
                                f"{msg['text'][:3000]}\n\n"
                                f"üîó –ü–µ—Ä–µ–π—Ç–∏: {link}"
                            )
                            await app.send_message(TARGET_CHAT_ID, message_text, disable_web_page_preview=True)
                            print(f"[+] ‚úÖ –ì—Ä—É–ø–ø–∞: {msg['source']} | {link}")
                            processed_links.add(link)
                except Exception as e:
                    print(f"[-] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã {group['title']}: {e}")

            await asyncio.sleep(CHECK_INTERVAL)

        except Exception as e:
            print(f"[-] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(60)

if __name__ == "__main__":
    app.run(main())




