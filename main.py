import feedparser
import asyncio
import time
import os
from datetime import datetime, timedelta
from pyrogram import Client
from pyrogram.types import Message

# ‚öôÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
SESSION_STRING = os.getenv("SESSION_STRING")
TARGET_CHAT_ID = int(os.getenv("TARGET_CHAT_ID"))  # ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç—ã
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "skidki_b–µ–ª–∞—Ä—É—Å–∏")  # username –±–µ–∑ @
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)

# üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
KEYWORDS = {
    "—Ä–æ–∑—ã–≥—Ä—ã—à", "–¥–∞—Ä–∏–º", "giveaway", "–∫–æ–Ω–∫—É—Ä—Å", "–≤—ã–∏–≥—Ä–∞–π", "–ø–æ–¥–∞—Ä–æ–∫",
    "—Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º", "–ø–æ–¥–∞—Ä–∏–º", "—É—á–∞—Å—Ç–≤—É–π",
    "—É—á–∞—Å—Ç–≤—É—é", "–ø–æ–¥–∞—Ä–∫–∏", "—Ä–æ–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è"
}

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
app = Client("rss_parser", api_id=API_ID, api_hash=API_HASH, session_string=SESSION_STRING)

# üîç –§—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
def contains_keyword(text: str) -> bool:
    if not text:
        return False
    text_lower = text.lower()
    for keyword in KEYWORDS:
        if keyword in text_lower:
            return True
    return False

# üì• –§—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ RSS
def get_latest_posts(channel_username: str, minutes_ago: int = 10):
    url = f"https://t.me/s/{channel_username}"
    feed = feedparser.parse(url)
    posts = []
    cutoff_time = datetime.utcnow() - timedelta(minutes=minutes_ago)

    for entry in feed.entries:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        pub_date = datetime(*entry.published_parsed[:6]) if hasattr(entry, 'published_parsed') else datetime.utcnow()
        if pub_date > cutoff_time:
            posts.append({
                "title": entry.title if hasattr(entry, 'title') else "",
                "summary": entry.summary if hasattr(entry, 'summary') else "",
                "link": entry.link if hasattr(entry, 'link') else "",
                "published": pub_date
            })
    return posts

# üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞
async def main():
    await app.start()
    print(f"üöÄ RSS-–ø–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ @{CHANNEL_USERNAME}")
    print(f"‚è±Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")

    processed_links = set()  # —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã

    while True:
        try:
            print(f"\n[üïí] {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤...")
            posts = get_latest_posts(CHANNEL_USERNAME, minutes_ago=15)

            for post in posts:
                link = post["link"]
                if link in processed_links:
                    continue  # —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω

                full_text = f"{post['title']} {post['summary']}"
                if contains_keyword(full_text):
                    message_text = (
                        f"üéÅ **–ù–∞–π–¥–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à!**\n\n"
                        f"{full_text[:3000]}\n\n"
                        f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({link})"
                    )
                    try:
                        await app.send_message(TARGET_CHAT_ID, message_text, disable_web_page_preview=False)
                        print(f"[+] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç: {link}")
                        processed_links.add(link)
                    except Exception as e:
                        print(f"[-] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

            await asyncio.sleep(CHECK_INTERVAL)

        except Exception as e:
            print(f"[-] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(60)

if __name__ == "__main__":

    app.run(main())
